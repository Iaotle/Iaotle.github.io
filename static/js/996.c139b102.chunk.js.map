{"version":3,"file":"static/js/996.c139b102.chunk.js","mappings":"uKAIA,MAAMA,EAAgBC,GAGV,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,OAGxBC,EAAW,CAChB,MACA,SACA,SAoCKC,EAAYC,IAAsB,IAArB,YAAEC,GAAaD,EACjC,MAGOE,EAAKC,IAAcC,EAAAA,EAAAA,UAAS,IAC5BC,EAASC,IAAiBF,EAAAA,EAAAA,UAASN,EAASI,KAC5CK,EAAMC,IAAcJ,EAAAA,EAAAA,UAAS,IAC7BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,GA0BzC,MAnDmBO,EAACC,EAAUC,KAC9B,MAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,WAAU,KACTF,EAAcG,QAAUL,GACtB,CAACA,KAEJI,EAAAA,EAAAA,WAAU,KACT,GAAIH,EAAO,CACV,MAAMK,EAAKC,YAAY,KACtBL,EAAcG,WACZJ,GACH,MAAO,IAAMO,cAAcF,EAC5B,CACA,MAAO,QACL,CAACL,KAYJF,CACC,KACC,IAAIU,EAASnB,EACToB,EAAUf,EACVA,EAZO,IAYQT,EAASI,GAAKL,SAChCwB,GAAU,EACVC,EAAU,GAEPD,IAAWvB,EAASD,OACnBI,GACHE,EAAW,GACXK,EAAW,IAEXE,GAAY,IAGbJ,EAAcR,EAASuB,GAAQE,MAAM,EAAGD,IACxCnB,EAAWkB,GACXb,EAAWc,EAAU,KAGvBb,EA5Ba,GA4BM,OAInBe,EAAAA,EAAAA,KAAA,OACCC,UAAU,mBACVC,MAAOhC,EAAaW,GAAW,CAAC,EAAI,CAAEsB,MAAO,OAC7CC,aAAcA,IAAMlB,GAAY,GAChCmB,aAAcA,IAAM3B,EAAMJ,EAASD,QAAUa,GAAY,GAAMoB,UAE/DC,EAAAA,EAAAA,MAAA,KAAGC,KAAMtC,EAAaW,GAAW,UAAUA,eAAuB,GAAGyB,SAAA,EACpEN,EAAAA,EAAAA,KAAA,QAAAM,SAAOzB,KACPmB,EAAAA,EAAAA,KAAA,QAAAM,SAAM,sBAMV/B,EAAUkC,aAAe,CACxBhC,aAAa,GAOd,U,aCnGA,MAsBA,EAtBgBiC,KACfV,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CACJC,MAAM,UACNC,YAAY,kDAAiDP,UAE7DC,EAAAA,EAAAA,MAAA,WAASN,UAAU,OAAOP,GAAG,UAASY,SAAA,EACrCN,EAAAA,EAAAA,KAAA,UAAAM,UACCN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOK,UACrBN,EAAAA,EAAAA,KAAA,MAAAM,UACCN,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,GAAG,WAAUT,SAAC,mBAIvBC,EAAAA,EAAAA,MAAA,OAAKN,UAAU,WAAUK,SAAA,EACxBN,EAAAA,EAAAA,KAAA,KAAAM,SAAG,sDACHN,EAAAA,EAAAA,KAACzB,EAAS,QAEXyB,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,Q","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n\t// NOTE: Passes RFC 5322 but not tested on google's standard.\n\t// eslint-disable-next-line no-useless-escape\n\tconst re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n\treturn re.test(text) || text.length === 0;\n};\n\nconst messages = [ // todo remove\n\t'dev',\n\t'iaotle',\n\t'vadim',\n\t// 'hi',\n\t// 'hello',\n\t// 'hola',\n\t// 'you-can-email-me-at-literally-anything! Really',\n\t// 'well, not anything. But most things',\n\t// 'like-this',\n\t// 'or-this',\n\t// 'but not this :(  ',\n\t// 'you.can.also.email.me.with.specific.topics.like',\n\t// 'just-saying-hi',\n\t// 'please-work-for-us',\n\t// 'help',\n\t// 'admin',\n\t// 'or-I-really-like-your-website',\n\t// 'thanks',\n];\n\nconst useInterval = (callback, delay) => {\n\tconst savedCallback = useRef();\n\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\tuseEffect(() => {\n\t\tif (delay) {\n\t\t\tconst id = setInterval(() => {\n\t\t\t\tsavedCallback.current();\n\t\t\t}, delay);\n\t\t\treturn () => clearInterval(id);\n\t\t}\n\t\treturn () => { }; // pass linter\n\t}, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n\tconst hold = 50; // ticks to wait after message is complete before rendering next message\n\tconst delay = 50; // tick length in mS\n\n\tconst [idx, updateIter] = useState(0); // points to current message\n\tconst [message, updateMessage] = useState(messages[idx]);\n\tconst [char, updateChar] = useState(0); // points to current char\n\tconst [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n\tuseInterval(\n\t\t() => {\n\t\t\tlet newIdx = idx;\n\t\t\tlet newChar = char;\n\t\t\tif (char - hold >= messages[idx].length) {\n\t\t\t\tnewIdx += 1;\n\t\t\t\tnewChar = 0;\n\t\t\t}\n\t\t\tif (newIdx === messages.length) {\n\t\t\t\tif (loopMessage) {\n\t\t\t\t\tupdateIter(0);\n\t\t\t\t\tupdateChar(0);\n\t\t\t\t} else {\n\t\t\t\t\tsetIsActive(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateMessage(messages[newIdx].slice(0, newChar));\n\t\t\t\tupdateIter(newIdx);\n\t\t\t\tupdateChar(newChar + 1);\n\t\t\t}\n\t\t},\n\t\tisActive ? delay : null,\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"inline-container\"\n\t\t\tstyle={validateText(message) ? {} : { color: 'red' }}\n\t\t\tonMouseEnter={() => setIsActive(false)}\n\t\t\tonMouseLeave={() => idx < messages.length && setIsActive(true)}\n\t\t>\n\t\t\t<a href={validateText(message) ? `mailto:${message}@iaotle.dev` : ''}>\n\t\t\t\t<span>{message}</span>\n\t\t\t\t<span>@iaotle.dev</span>\n\t\t\t</a>\n\t\t</div>\n\t);\n};\n\nEmailLink.defaultProps = {\n\tloopMessage: false,\n};\n\nEmailLink.propTypes = {\n\tloopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ContactIcons from '../components/Contact/ContactIcons';\nimport EmailLink from '../components/Contact/EmailLink';\nimport Main from '../layouts/Main';\n\nconst Contact = () => (\n\t<Main\n\t\ttitle=\"Contact\"\n\t\tdescription=\"Contact Vadim Isakov via email @ dev@iaotle.dev\"\n\t>\n\t\t<article className=\"post\" id=\"contact\">\n\t\t\t<header>\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t<Link to=\"/contact\">Contact</Link>\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<div className=\"email-at\">\n\t\t\t\t<p>Feel free to get in touch. You can email me at: </p>\n\t\t\t\t<EmailLink />\n\t\t\t</div>\n\t\t\t<ContactIcons />\n\t\t</article>\n\t</Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","messages","EmailLink","_ref","loopMessage","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","_jsxs","href","defaultProps","Contact","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}